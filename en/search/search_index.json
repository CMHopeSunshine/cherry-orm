{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#overview_1","title":"Overview","text":"<p><code>Cherry ORM</code> is an asynchronous object relational mapping (ORM) library for Python. It is based on SQLAlchemy Core and Pydantic V1.</p> <p>All of its design is designed to be simple and easy to use, greatly reducing the cost of database operation for developers, improving development efficiency, and allowing developers to focus more on the implementation of business logic.</p>"},{"location":"#feature","title":"Feature","text":"<ul> <li>Full type annotation support</li> <li>Asynchronous support</li> <li>Data validation</li> <li>Easy to use</li> </ul>"},{"location":"install/","title":"Installation","text":"<p>Python Version</p> <p><code>Cherry-ORM</code> only support Python 3.8+\uff0cMake sure your version of Python meets the requirements\u3002</p>"},{"location":"install/#installation_1","title":"Installation","text":""},{"location":"install/#from-pypi","title":"from PYPI","text":"<p>You can install <code>Cherry-ORM</code> using your favorite Python package manager, such as <code>pip</code>,<code>poetry</code>,<code>pdm</code> etc\u3002</p>"},{"location":"install/#pip","title":"PIP","text":"<pre><code>pip install cherry-orm\n</code></pre>"},{"location":"install/#poetry","title":"Poetry","text":"<pre><code>poetry add cherry-orm\n</code></pre>"},{"location":"install/#pdm","title":"PDM","text":"<pre><code>pdm add cherry-orm\n</code></pre>"},{"location":"install/#from-git","title":"from GIT","text":"<p>You can also install it from the source code to get the latest development version.</p> <pre><code>git clone https://github.com/CMHopeSunshine/cherry-orm\ncd cherry-orm\npip install .\n</code></pre>"},{"location":"install/#optional-dependency","title":"Optional Dependency","text":"<p>Choose which dependencies to install based on your database backend.</p>"},{"location":"install/#sqlite","title":"SQLite","text":"<p><pre><code>pip install cherry-orm[sqlite]\n# or\npoetry add cherry-orm[sqlite]\n# or\npdm add cherry-orm[sqlite]\n</code></pre> <code>aiosqlite</code> will be installed for you to support asynchrony.</p>"},{"location":"install/#mysql","title":"MySQL","text":"<p><pre><code>pip install cherry-orm[mysql]\n# or\npoetry add cherry-orm[mysql]\n# or\npdm add cherry-orm[mysql]\n</code></pre> <code>asyncmy</code> will be installed for you to support asynchrony.</p>"},{"location":"install/#postgresql","title":"PostgreSQL","text":"<p><pre><code>pip install cherry-orm[postgresql]\n# or\npoetry add cherry-orm[postgresql]\n# or\npdm add cherry-orm[postgresql]\n</code></pre> <code>asyncpg</code> will be installed for you to support asynchrony.</p>"},{"location":"install/#install-manually","title":"Install manually","text":"<p>Of course, you can manually install the back-end dependencies you need, such as <code>pip install aiomysql</code>\u3002</p>"},{"location":"quick-start/","title":"Quick Start","text":"<p>The following is an example of a <code>Cherry</code>, showing the definition of the model, the addition and deletion of data, etc.</p> <pre><code>from datetime import date\nfrom typing import List, Optional\nimport cherry\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\nclass Student(cherry.Model):\nid: int = cherry.Field(primary_key=True)\nname: str = cherry.Field(unique=True, index=True)\nage: int\nbirthday: date = cherry.Field(default_factory=date.today)\nschool: cherry.ForeignKey[Optional[\"School\"]] = None\nclass Meta:\ndatabase = db\ntablename = \"student\"\nclass School(cherry.Model):\nid: cherry.PrimaryKey[int]\nname: str = cherry.Field(unique=True, index=True)\nstudents: cherry.ReverseRelation[List[Student]] = []\nclass Meta:\ndatabase = db\ntablename = \"school\"\nasync def main():\nawait db.init()\nschool = await School(id=1, name=\"school 1\").insert()\nstudent1 = await Student(id=1, name=\"student 1\", age=15, school=school).insert()\nawait Student(id=2, name=\"student 2\", age=18, school=school).insert()\nawait Student(id=3, name=\"student 3\", age=20, school=school).insert()\nstudent1.age += 1\nawait student1.save()\nawait school.fetch_related(School.students)\nassert len(school.students) == 3\n# Pythonic style\nstudent2: Student = await Student.filter(Student.name == \"student 2\").get()\n# Django style\nstudent2: Student = await Student.filter(name=\"student 2\").get()\nstudents: List[Student] = await Student.filter(Student.age &gt;= 18).all()\nstudent_nums: int = await Student.filter(Student.age &gt;= 18).count()\nassert len(students) == student_nums\nstudent_age_avg: Optional[int] = await Student.select().avg(Student.age)\nstudent_with_school: Student = (\nawait Student.filter(Student.name == \"student 3\")\n.prefetch_related(Student.school)\n.get()\n)\nawait Student.select().update(birthday=date(2023, 10, 1))\nawait Student.filter(Student.age &gt;= 20).delete()\n</code></pre>"}]}