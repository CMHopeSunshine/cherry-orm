{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6982\u8ff0","text":""},{"location":"#_2","title":"\u6982\u8ff0","text":"<p><code>Cherry ORM</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b Python \u200b\u7684\u200b\u5f02\u6b65\u200b\u5bf9\u8c61\u200b\u5173\u7cfb\u200b\u6620\u5c04\u200b\uff08ORM\uff09\u200b\u5e93\u200b\uff0c\u200b\u5b83\u200b\u57fa\u4e8e\u200b SQLAlchemy Core \u200b\u548c\u200b Pydantic V1 \u200b\u6784\u5efa\u200b\u3002</p> <p>\u200b\u5b83\u200b\u7684\u200b\u4e00\u5207\u200b\u8bbe\u8ba1\u200b\u90fd\u200b\u662f\u200b\u4e3a\u4e86\u200b\u7b80\u5355\u200b\u6613\u7528\u200b\uff0c\u200b\u6781\u5927\u200b\u5730\u200b\u51cf\u5c11\u200b\u5f00\u53d1\u8005\u200b\u7684\u200b\u6570\u636e\u5e93\u200b\u64cd\u4f5c\u200b\u6210\u672c\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u5f00\u53d1\u200b\u6548\u7387\u200b\uff0c\u200b\u8ba9\u200b\u5f00\u53d1\u8005\u200b\u66f4\u200b\u4e13\u6ce8\u200b\u4e8e\u200b\u4e1a\u52a1\u200b\u903b\u8f91\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002</p>"},{"location":"#_3","title":"\u7279\u6027","text":"<ul> <li>\u200b\u5b8c\u6574\u200b\u7684\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\u652f\u6301\u200b</li> <li>\u200b\u5f02\u6b65\u200b\u652f\u6301\u200b</li> <li>\u200b\u6570\u636e\u200b\u9a8c\u8bc1\u200b</li> <li>\u200b\u7b80\u5355\u200b\u6613\u7528\u200b</li> </ul>"},{"location":"install/","title":"\u5b89\u88c5","text":"<p>Python \u200b\u7248\u672c\u200b</p> <p><code>Cherry-ORM</code> \u200b\u53ea\u200b\u652f\u6301\u200b Python 3.8+\uff0c\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u4f60\u200b\u7684\u200b Python \u200b\u7248\u672c\u200b\u7b26\u5408\u8981\u6c42\u200b\u3002</p>"},{"location":"install/#_2","title":"\u5b89\u88c5","text":""},{"location":"install/#pypi","title":"PYPI \u200b\u5b89\u88c5","text":"<p>\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4f60\u200b\u559c\u6b22\u200b\u7684\u200b Python \u200b\u5305\u200b\u7ba1\u7406\u5668\u200b\u6765\u200b\u5b89\u88c5\u200b <code>Cherry-ORM</code>\uff0c\u200b\u6bd4\u5982\u200b <code>pip</code>\u3001<code>poetry</code>\u3001<code>pdm</code> \u200b\u7b49\u200b\u3002</p>"},{"location":"install/#pip","title":"PIP","text":"<pre><code>pip install cherry-orm\n</code></pre>"},{"location":"install/#poetry","title":"Poetry","text":"<pre><code>poetry add cherry-orm\n</code></pre>"},{"location":"install/#pdm","title":"PDM","text":"<pre><code>pdm add cherry-orm\n</code></pre>"},{"location":"install/#git","title":"GIT \u200b\u5b89\u88c5","text":"<p>\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u6e90\u7801\u200b\u5b89\u88c5\u200b\uff0c\u200b\u4ee5\u200b\u83b7\u53d6\u200b\u6700\u65b0\u200b\u7684\u200b\u5f00\u53d1\u200b\u7248\u672c\u200b\u3002</p> <pre><code>git clone https://github.com/CMHopeSunshine/cherry-orm\ncd cherry-orm\npip install .\n</code></pre>"},{"location":"install/#_3","title":"\u53ef\u200b\u9009\u200b\u4f9d\u8d56","text":"<p>\u200b\u6839\u636e\u200b\u4f60\u200b\u7684\u200b\u6570\u636e\u5e93\u200b\u540e\u7aef\u200b\u6765\u200b\u9009\u62e9\u200b\u5b89\u88c5\u200b\u5bf9\u5e94\u200b\u7684\u200b\u4f9d\u8d56\u200b\u3002</p>"},{"location":"install/#sqlite","title":"SQLite","text":"<p><pre><code>pip install cherry-orm[sqlite]\n# \u200b\u6216\u8005\u200b\npoetry add cherry-orm[sqlite]\n# \u200b\u6216\u8005\u200b\npdm add cherry-orm[sqlite]\n</code></pre> \u200b\u4f1a\u4e3a\u200b\u4f60\u200b\u5b89\u88c5\u200b <code>aiosqlite</code> \u200b\u6765\u200b\u652f\u6301\u200b\u5f02\u6b65\u200b\u3002</p>"},{"location":"install/#mysql","title":"MySQL","text":"<p><pre><code>pip install cherry-orm[mysql]\n# \u200b\u6216\u8005\u200b\npoetry add cherry-orm[mysql]\n# \u200b\u6216\u8005\u200b\npdm add cherry-orm[mysql]\n</code></pre> \u200b\u4f1a\u4e3a\u200b\u4f60\u200b\u5b89\u88c5\u200b <code>asyncmy</code> \u200b\u6765\u200b\u652f\u6301\u200b\u5f02\u6b65\u200b\u3002</p>"},{"location":"install/#postgresql","title":"PostgreSQL","text":"<p><pre><code>pip install cherry-orm[postgresql]\n# \u200b\u6216\u8005\u200b\npoetry add cherry-orm[postgresql]\n# \u200b\u6216\u8005\u200b\npdm add cherry-orm[postgresql]\n</code></pre> \u200b\u4f1a\u4e3a\u200b\u4f60\u200b\u5b89\u88c5\u200b <code>asyncpg</code> \u200b\u6765\u200b\u652f\u6301\u200b\u5f02\u6b65\u200b\u3002</p>"},{"location":"install/#_4","title":"\u624b\u52a8\u200b\u5b89\u88c5","text":"<p>\u200b\u5f53\u7136\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u624b\u52a8\u200b\u5b89\u88c5\u200b\u4f60\u200b\u6240\u200b\u9700\u8981\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\u4f9d\u8d56\u200b\uff0c\u200b\u4f8b\u5982\u200b<code>pip install aiomysql</code>\u3002</p>"},{"location":"quick-start/","title":"\u5feb\u901f\u200b\u5f00\u59cb","text":"<p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b <code>Cherry</code> \u200b\u7684\u200b\u793a\u4f8b\u200b\uff0c\u200b\u5c55\u793a\u200b\u4e86\u200b\u6a21\u578b\u200b\u7684\u200b\u5b9a\u4e49\u200b\u3001\u200b\u6570\u636e\u200b\u7684\u200b\u589e\u5220\u200b\u6539\u67e5\u200b\u7b49\u200b\u3002\u200b\u8be6\u7ec6\u200b\u6559\u7a0b\u200b\u8bf7\u200b\u79fb\u6b65\u200b<code>\u200b\u6559\u7a0b\u200b\u7bc7\u200b</code>\u3002</p> <pre><code>from datetime import date\nfrom typing import List, Optional\n\nimport cherry\n\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\n\n\nclass Student(cherry.Model):\n    id: int = cherry.Field(primary_key=True)\n    name: str = cherry.Field(unique=True, index=True)\n    age: int\n    birthday: date = cherry.Field(default_factory=date.today)\n    school: cherry.ForeignKey[Optional[\"School\"]] = None\n\n    class Meta:\n        database = db\n        tablename = \"student\"\n\n\nclass School(cherry.Model):\n    id: cherry.PrimaryKey[int]\n    name: str = cherry.Field(unique=True, index=True)\n    students: cherry.ReverseRelation[List[Student]] = []\n\n    class Meta:\n        database = db\n        tablename = \"school\"\n\n\nasync def main():\n    await db.init()\n\n    school = await School(id=1, name=\"school 1\").insert()\n\n    student1 = await Student(id=1, name=\"student 1\", age=15, school=school).insert()\n    await Student(id=2, name=\"student 2\", age=18, school=school).insert()\n    await Student(id=3, name=\"student 3\", age=20, school=school).insert()\n\n    student1.age += 1\n    await student1.save()\n\n    await school.fetch_related(School.students)\n    assert len(school.students) == 3\n\n    # Pythonic style\n    student2: Student = await Student.filter(Student.name == \"student 2\").get()\n    # Django style\n    student2: Student = await Student.filter(name=\"student 2\").get()\n\n    students: List[Student] = await Student.filter(Student.age &gt;= 18).all()\n    student_nums: int = await Student.filter(Student.age &gt;= 18).count()\n    assert len(students) == student_nums\n\n    student_age_avg: Optional[int] = await Student.select().avg(Student.age)\n\n    student_with_school: Student = (\n        await Student.filter(Student.name == \"student 3\")\n        .prefetch_related(Student.school)\n        .get()\n    )\n\n    await Student.select().update(birthday=date(2023, 10, 1))\n    await Student.filter(Student.age &gt;= 20).delete()\n</code></pre>"},{"location":"tutorial/definition/","title":"\u6a21\u578b\u200b\u5b9a\u4e49","text":""},{"location":"tutorial/definition/#_2","title":"\u5b9a\u4e49\u200b\u6a21\u578b","text":""},{"location":"tutorial/definition/#_3","title":"\u6a21\u578b\u200b\u7c7b","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u548c\u200b <code>Pydantic</code> \u200b\u4e00\u6837\u200b\u8f7b\u677e\u200b\u5730\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u6570\u636e\u5e93\u200b\u6a21\u578b\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u7ee7\u627f\u200b <code>cherry.Model</code> \u200b\u7c7b\u200b\u5373\u53ef\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u6a21\u578b\u200b\u3002</p> <pre><code>from datetime import date\n\nimport cherry\n\n\nclass User(cherry.Model):\n    id: int = cherry.Field(primary_key=True)\n    name: str\n    age: int = 18\n    birthday: date\n</code></pre>"},{"location":"tutorial/definition/#_4","title":"\u6a21\u578b\u200b\u5b57\u200b\u6bb5","text":"<p>\u200b\u53ef\u4ee5\u200b\u7528\u200b <code>cherry.Field</code> \u200b\u5bf9\u6a21\u578b\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u8fdb\u884c\u200b\u8be6\u7ec6\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u5c31\u200b\u50cf\u200b <code>pydantic.Field</code> \u200b\u4e00\u6837\u200b\u3002</p> <pre><code>class User(cherry.Model):\n    id: int = cherry.Field(primary_key=True)\n    name: str = cherry.Field(unique=True)\n    age: int = cherry.Field(default=18, index=True)\n    birthday: date = cherry.Field(default_factory=date.today)\n</code></pre> <p><code>cherry.Field</code> \u200b\u652f\u6301\u200b <code>pydantic.Field</code> \u200b\u7684\u200b\u6240\u6709\u200b\u914d\u7f6e\u200b\uff0c\u200b\u5e76\u200b\u589e\u6dfb\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b\uff1a</p> <ul> <li>primary_key - \u200b\u4e3b\u952e\u200b</li> <li>autoincrement - \u200b\u6570\u636e\u5e93\u200b\u81ea\u589e\u200b</li> <li>index - \u200b\u7d22\u5f15\u200b</li> <li>unique - \u200b\u552f\u4e00\u200b\u7ea6\u675f\u200b</li> <li>nullable - \u200b\u662f\u5426\u200b\u5141\u8bb8\u200b\u4e3a\u7a7a\u200b</li> </ul> <p>\u200b\u540c\u65f6\u200b\u5b83\u4eec\u200b\u8fd8\u6709\u200b\u4e00\u4e9b\u200b\u7b80\u4fbf\u200b\u5199\u6cd5\u200b\uff0c\u200b\u901a\u8fc7\u200b <code>Annotated</code> \u200b\u6765\u200b\u5b9e\u73b0\u200b\uff1a</p> FieldAnnotated <pre><code>class User(cherry.Model):\n    id: int = cherry.Field(primary_key=True)\n    name: str = cherry.Field(unique=True)\n    age: int = cherry.Field(default=18, index=True)\n    birthday: date = cherry.Field(default_factory=date.today)\n</code></pre> <pre><code>class User(cherry.Model):\n    id: cherry.PrimaryKey[int]\n    name: cherry.Unique[str]\n    age: cherry.Index[int] = 18\n    birthday: date = cherry.Field(default_factory=date.today)\n</code></pre> <p>\u200b\u5bf9\u4e8e\u200b\u6570\u636e\u5e93\u200b\u81ea\u589e\u200b\u6574\u578b\u200b\u4e3b\u952e\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u91c7\u7528\u200b\u4ee5\u4e0b\u200b\u5199\u6cd5\u200b\uff1a</p> FieldAnnotated <pre><code>from datetime import date\nfrom typing import Optional\n\nimport cherry\n\n\nclass User(cherry.Model):\n    id: Optional[int] = cherry.Field(default=None, primary_key=True, autoincrement=True)\n    name: cherry.Unique[str]\n    age: cherry.Index[int] = 18\n    birthday: date = cherry.Field(default_factory=date.today)\n</code></pre> <pre><code>from datetime import date\n\nimport cherry\n\n\nclass User(cherry.Model):\n    id: cherry.AutoIntPK = None\n    name: cherry.Unique[str]\n    age: cherry.Index[int] = 18\n    birthday: date = cherry.Field(default_factory=date.today)\n</code></pre>"},{"location":"tutorial/definition/#_5","title":"\u6570\u636e\u5e93\u200b\u7ed1\u5b9a","text":"<p>\u200b\u5728\u200b\u5b9a\u4e49\u200b\u597d\u200b <code>Model</code> \u200b\u4e4b\u540e\u200b\uff0c\u200b\u4f60\u200b\u5c1a\u672a\u200b\u80fd\u591f\u200b\u4f7f\u7528\u200b\u5b83\u200b\u3002\u200b\u4f60\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b <code>cherry.Database</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5b83\u200b\u8d1f\u8d23\u200b\u4e0e\u200b\u6570\u636e\u5e93\u200b\u8fdb\u884c\u200b\u8fde\u63a5\u200b\u4ea4\u4e92\u200b\uff0c\u200b\u4f60\u200b\u9700\u8981\u200b\u4f20\u5165\u200b\u4e00\u4e2a\u200b\u6570\u636e\u5e93\u200b\u8fde\u63a5\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5fc5\u987b\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u652f\u6301\u200b\u5f02\u6b65\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\uff0c\u200b\u4f8b\u5982\u200b:</p> <ul> <li><code>sqlite+aiosqlite:///test.db</code></li> <li><code>mysql+asyncmy://root:123456@localhost:3306/test</code></li> <li><code>postgresql+asyncpg://root:123456@localhost:5432/test</code></li> </ul> <pre><code>db = cherry.Database(\"sqlite+aiosqlite:///test.db\")\n</code></pre> <p>\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u6a21\u578b\u200b\u7684\u200b <code>Meta</code> \u200b\u7c7b\u200b\uff0c\u200b\u5c06\u200b\u6570\u636e\u5e93\u200b\u5bf9\u8c61\u200b\u7ed1\u5b9a\u200b\u5230\u200b\u6a21\u578b\u200b\u4e0a\u200b\uff1a</p> <pre><code>class User(cherry.Model):\n    id: int = cherry.Field(primary_key=True)\n    name: str\n    age: int = 18\n\n    class Meta:\n        tablename = \"user_table\"\n        database = db\n</code></pre> <p>\u200b\u5728\u200b <code>Meta</code> \u200b\u7c7b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5b9a\u4e49\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b\uff1a</p> <ul> <li>database - <code>cherry.Database</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u65e0\u200b\u3002</li> <li>tablename - \u200b\u6a21\u578b\u200b\u5728\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\u7684\u200b\u8868\u540d\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4f7f\u7528\u200b\u6a21\u578b\u200b\u7684\u200b\u7c7b\u540d\u200b\u4f5c\u4e3a\u200b\u8868\u540d\u200b\uff0c\u200b\u4f8b\u5982\u200b\u672c\u5904\u200b\u7684\u200b <code>User</code>\u3002</li> <li>abstract - \u200b\u662f\u5426\u200b\u4e3a\u200b\u62bd\u8c61\u200b\u6a21\u578b\u200b\u3002\u200b\u62bd\u8c61\u200b\u6a21\u578b\u200b\u5373\u200b\u53ea\u200b\u7528\u4e8e\u200b\u7ee7\u627f\u200b\uff0c\u200b\u4e0d\u200b\u4f5c\u4e3a\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\u7684\u200b\u8868\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>False</code>\u3002</li> <li>constraints - \u200b\u66f4\u200b\u591a\u200b <code>sqlalchemy</code> \u200b\u7684\u200b\u8868\u200b\u7ea6\u675f\u200b\uff0c\u200b\u7c7b\u578b\u200b\u4e3a\u200b <code>List[sqlalchemy.ColumnCollectionConstraint]</code>\u3002</li> <li>indexes - \u200b\u7ec4\u5408\u200b\u7d22\u5f15\u200b\uff0c\u200b\u7c7b\u578b\u200b\u4e3a\u200b <code>List[cherry.CompositeIndex]</code>\u3002</li> <li>use_jsonb_in_postgres - \u200b\u5728\u200b postgresql \u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b Mapping \u200b\u7b49\u200b\u7c7b\u578b\u200b\u4f7f\u7528\u200b jsonb\uff0c\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>True</code>\u3002</li> <li>use_array_in_postgres - \u200b\u5728\u200b postgresql \u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b Iterable \u200b\u7b49\u200b\u7c7b\u578b\u200b\u4f7f\u7528\u200b array\uff0c\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>True</code>\u3002</li> </ul>"},{"location":"tutorial/definition/#_6","title":"\u6a21\u578b\u200b\u521d\u59cb\u5316","text":"<p>\u200b\u5728\u200b\u7ed1\u5b9a\u200b\u6570\u636e\u5e93\u200b\u5bf9\u8c61\u200b\u540e\u200b\uff0c\u200b\u4f60\u200b\u8fd8\u200b\u9700\u8981\u200b\u5728\u200b\u4f60\u200b\u7684\u200b\u5165\u53e3\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u8c03\u7528\u200b <code>Database.init</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5bf9\u6a21\u578b\u200b\u4ee5\u53ca\u200b\u6570\u636e\u5e93\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b\u624d\u80fd\u200b\u4f7f\u7528\u200b\u3002</p> <pre><code>async def main():\n    await db.init()\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"tutorial/crud/aggregation/","title":"\u805a\u5408\u200b\u67e5\u8be2","text":"<p><code>Cherry</code> \u200b\u652f\u6301\u200b\u90e8\u5206\u200b\u805a\u5408\u200b\u67e5\u8be2\u200b\u3002</p>"},{"location":"tutorial/crud/aggregation/#count","title":"<code>count</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u7684\u200b\u6570\u91cf\u200b\u3002</p> <pre><code>    nums = await User.filter(User.age &gt;= 15).count()\n</code></pre>"},{"location":"tutorial/crud/aggregation/#avg","title":"<code>avg</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u6307\u5b9a\u200b\u5b57\u6bb5\u200b\u7684\u200b\u5e73\u5747\u503c\u200b\u3002</p> <pre><code>    avg = await User.filter(User.money &gt;= 500).avg(User.money)\n</code></pre>"},{"location":"tutorial/crud/aggregation/#min","title":"<code>min</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u6307\u5b9a\u200b\u5b57\u6bb5\u200b\u7684\u200b\u6700\u5c0f\u503c\u200b\u3002</p> <pre><code>    min_age = await User.select().min(User.age)\n</code></pre>"},{"location":"tutorial/crud/aggregation/#max","title":"<code>max</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u6307\u5b9a\u200b\u5b57\u6bb5\u200b\u7684\u200b\u6700\u5927\u503c\u200b\u3002</p> <pre><code>    max_age = await User.select().max(User.age)\n</code></pre>"},{"location":"tutorial/crud/aggregation/#sum","title":"<code>sum</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u6307\u5b9a\u200b\u5b57\u6bb5\u200b\u7684\u200b\u603b\u548c\u200b\u3002</p> <pre><code>    money_sum = await User.filter(User.age &gt;= 20).sum(User.money)\n</code></pre>"},{"location":"tutorial/crud/aggregation/#coalesce","title":"<code>coalesce</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u6307\u5b9a\u200b\u5b57\u6bb5\u200b\u7684\u200b\u5408\u5e76\u200b\u53d6\u503c\u200b\uff0c\u200b\u8fd4\u56de\u200b\u5b57\u200b\u6bb5\u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u975e\u200b\u7a7a\u503c\u200b\uff0c\u200b\u5982\u200b\u90fd\u200b\u4e3a\u200b\u7a7a\u200b\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b <code>None</code>\u3002</p> <pre><code>    c: Union[str, int, None] = (\n        await User.select().coalesce(User.name, User.money).first()\n    )\n    cs: List[Union[str, int, None]] = (\n        await User.select().coalesce(User.name, User.money).all()\n    )\n</code></pre>"},{"location":"tutorial/crud/aggregation/#_2","title":"\u5b8c\u6574\u200b\u4ee3\u7801","text":"\u672c\u7ae0\u200b\u5b8c\u6574\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b <pre><code>from typing import List, Union\n\nimport cherry\n\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\n\n\nclass User(cherry.Model):\n    id: int = cherry.Field(primary_key=True)\n    name: str = cherry.Field(unique=True)\n    age: int\n    money: int\n\n    class Meta:\n        database = db\n        tablename = \"user\"\n\n\nasync def main():\n    await db.init()\n\n    users = [\n        User(id=i, name=f\"user {i}\", age=i * 5, money=i * 100) for i in range(1, 11)\n    ]\n    await User.save_many(*users)\n\n    nums = await User.filter(User.age &gt;= 15).count()\n    avg = await User.filter(User.money &gt;= 500).avg(User.money)\n    min_age = await User.select().min(User.age)\n    max_age = await User.select().max(User.age)\n    money_sum = await User.filter(User.age &gt;= 20).sum(User.money)\n    c: Union[str, int, None] = (\n        await User.select().coalesce(User.name, User.money).first()\n    )\n    cs: List[Union[str, int, None]] = (\n        await User.select().coalesce(User.name, User.money).all()\n    )\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"tutorial/crud/delete/","title":"\u5220\u9664","text":""},{"location":"tutorial/crud/delete/#delete","title":"<code>delete</code>","text":"<p>\u200b\u8c03\u7528\u200b\u6a21\u578b\u200b\u7684\u200b <code>delete</code> \u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u5220\u9664\u200b\u6a21\u578b\u200b\u3002</p> <pre><code>    user = await User(name=\"Paimon\").insert()\n    await user.delete()\n</code></pre>"},{"location":"tutorial/crud/delete/#delete_many","title":"<code>delete_many</code>","text":"<p>\u200b\u4f7f\u7528\u200b\u6a21\u578b\u200b\u7c7b\u200b\u7684\u200b <code>delete_many</code> \u200b\u6765\u200b\u540c\u65f6\u200b\u5220\u9664\u200b\u591a\u6761\u200b\u6570\u636e\u200b\uff1a</p> <pre><code>    user1 = await User(name=\"user 1\").insert()\n    user2 = await User(name=\"user 2\").insert()\n    user3 = await User(name=\"user 3\").insert()\n\n    await User.delete_many(user1, user2, user3)\n</code></pre>"},{"location":"tutorial/crud/delete/#_2","title":"\u5b8c\u6574\u200b\u4ee3\u7801","text":"\u672c\u7ae0\u200b\u5b8c\u6574\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b <pre><code>import cherry\n\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\n\n\nclass User(cherry.Model):\n    id: cherry.AutoIntPK = None\n    name: str\n\n    class Meta:\n        database = db\n        tablename = \"user\"\n\n\nasync def main():\n    await db.init()\n\n    user = await User(name=\"Paimon\").insert()\n    await user.delete()\n\n    user1 = await User(name=\"user 1\").insert()\n    user2 = await User(name=\"user 2\").insert()\n    user3 = await User(name=\"user 3\").insert()\n\n    await User.delete_many(user1, user2, user3)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"tutorial/crud/insert/","title":"\u63d2\u5165","text":""},{"location":"tutorial/crud/insert/#insert","title":"<code>insert</code>","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u7684\u200b <code>insert</code> \u200b\u65b9\u6cd5\u200b\u6765\u200b\u5c06\u200b\u5176\u200b\u63d2\u5165\u200b\u5230\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\uff1a</p> <pre><code>    user = User(name=\"user 1\")\n    await user.insert()\n</code></pre>"},{"location":"tutorial/crud/insert/#insert_many","title":"<code>insert_many</code>","text":"<p>\u200b\u4f7f\u7528\u200b\u6a21\u578b\u200b\u7c7b\u200b\u7684\u200b <code>insert_many</code> \u200b\u6765\u200b\u540c\u65f6\u200b\u63d2\u5165\u200b\u591a\u6761\u200b\u6570\u636e\u200b\uff1a</p> <pre><code>    user2 = User(name=\"user 2\")\n    user3 = User(name=\"user 3\")\n    user4 = User(name=\"user 4\")\n    await User.insert_many(user2, user3, user4)\n</code></pre>"},{"location":"tutorial/crud/insert/#_2","title":"\u5b8c\u6574\u200b\u4ee3\u7801","text":"\u672c\u7ae0\u200b\u5b8c\u6574\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b <pre><code>import cherry\n\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\n\n\nclass User(cherry.Model):\n    id: cherry.AutoIntPK = None\n    name: str\n    age: int = 18\n\n    class Meta:\n        database = db\n        tablename = \"user\"\n\n\nasync def main():\n    await db.init()\n\n    user = User(name=\"user 1\")\n    await user.insert()\n\n    user2 = User(name=\"user 2\")\n    user3 = User(name=\"user 3\")\n    user4 = User(name=\"user 4\")\n    await User.insert_many(user2, user3, user4)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"tutorial/crud/query/","title":"\u67e5\u8be2","text":"<p><code>Cherry</code> \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u975e\u5e38\u200b\u4e30\u5bcc\u200b\u7684\u200b\u67e5\u8be2\u200b\u65b9\u5f0f\u200b\u4ee5\u53ca\u200b\u4e24\u79cd\u200b\u67e5\u8be2\u200bstyle\uff0c\u200b\u80fd\u591f\u200b\u6ee1\u8db3\u200b\u5927\u90e8\u5206\u200b\u7684\u200b\u67e5\u8be2\u200b\u9700\u6c42\u200b\u3002</p>"},{"location":"tutorial/crud/query/#get","title":"<code>get</code>","text":"<p>\u200b\u6839\u636e\u200b\u67e5\u8be2\u200b\u6761\u4ef6\u200b\uff0c\u200b\u83b7\u53d6\u200b\u6307\u5b9a\u200b\u6a21\u578b\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u200b\u4e0d\u200b\u5b58\u5728\u200b\u5219\u200b\u629b\u51fa\u200b\u5f02\u5e38\u200b</p> Pythonic styleDjange style <pre><code>    user: User = await User.get(User.id == 1)\n</code></pre> <pre><code>    user: User = await User.get(id=1)\n</code></pre>"},{"location":"tutorial/crud/query/#get_or_none","title":"<code>get_or_none</code>","text":"<p>\u200b\u6839\u636e\u200b\u67e5\u8be2\u200b\u6761\u4ef6\u200b\uff0c\u200b\u83b7\u53d6\u200b\u6307\u5b9a\u200b\u6a21\u578b\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u200b\u4e0d\u200b\u5b58\u5728\u200b\u5219\u200b\u8fd4\u56de\u200b <code>None</code></p> Pythonic styleDjange style <pre><code>    user_or_none: Optional[User] = await User.get_or_none(User.name == \"user 2\")\n</code></pre> <pre><code>    user_or_none: Optional[User] = await User.get_or_none(name=\"user 2\")\n</code></pre>"},{"location":"tutorial/crud/query/#get_or_create","title":"<code>get_or_create</code>","text":"<p>\u200b\u6839\u636e\u200b\u67e5\u8be2\u200b\u6761\u4ef6\u200b\uff0c\u200b\u83b7\u53d6\u200b\u6307\u5b9a\u200b\u6a21\u578b\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u200b\u4e0d\u200b\u5b58\u5728\u200b\u5219\u200b\u4f7f\u7528\u200b\u67e5\u8be2\u200b\u6761\u4ef6\u200b\u548c\u200b <code>default</code> \u200b\u4e2d\u200b\u7684\u200b\u503c\u6765\u200b\u521b\u5efa\u200b\u5b83\u200b\u3002</p> <p>\u200b\u8fd4\u56de\u503c\u200b\u7c7b\u578b\u200b\u4e3a\u200b <code>Tuple[Model, bool]</code>\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u503c\u4e3a\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u7b2c\u4e8c\u4e2a\u200b\u503c\u200b\u662f\u200b <code>bool</code> \u200b\u7c7b\u578b\u200b\uff0c<code>True</code> \u200b\u8868\u793a\u200b\u83b7\u53d6\u200b\u5230\u200b\u4e86\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\uff0c<code>False</code> \u200b\u8868\u793a\u200b\u521b\u5efa\u200b\u4e86\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u3002</p> Pythonic styleDjange style <pre><code>    user, is_get = await User.get_or_create(\n        User.name == \"user 3\",\n        defaults={\"id\": 3, \"age\": 15},\n    )\n</code></pre> <pre><code>    user, is_get = await User.get_or_create(\n        name=\"user 3\",\n        defaults={\"id\": 3, \"age\": 15},\n    )\n</code></pre>"},{"location":"tutorial/crud/query/#filter","title":"<code>filter</code>","text":"<p>\u200b\u6839\u636e\u200b\u67e5\u8be2\u200b\u6761\u4ef6\u200b\u6765\u200b\u8fdb\u884c\u200b\u8fdb\u4e00\u6b65\u200b\u7684\u200b\u590d\u6742\u200b\u67e5\u8be2\u200b\u3002</p> <p><code>filter</code> \u200b\u5b9e\u9645\u4e0a\u200b\u8fd4\u56de\u200b\u7684\u200b\u662f\u200b\u4e00\u4e2a\u200b <code>QuerySet</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u7ee7\u7eed\u200b\u505a\u200b\u94fe\u5f0f\u200b\u8c03\u7528\u200b\u6765\u200b\u8fdb\u884c\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u67e5\u8be2\u200b\uff0c\u200b\u6700\u7ec8\u200b\u901a\u8fc7\u200b\u8c03\u7528\u200b <code>first</code>, <code>all</code>, <code>get</code>, <code>random_one</code> \u200b\u6216\u200b <code>paginate</code> \u200b\u6765\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\u3002</p> Pythonic styleDjange style <pre><code>    user1: Optional[User] = await User.filter(User.age &lt;= 15).first()\n    users: List[User] = await User.filter(User.age &gt; 10).all()\n    user2: User = await User.filter(User.name == \"user 1\").get()\n    user3: Optional[User] = await User.filter(User.age &gt;= 5).random_one()\n    usersp: List[User] = await User.filter(User.age &lt;= 5).paginate(page=1, page_size=3)\n</code></pre> <pre><code>    user1: Optional[User] = await User.filter(age__le=15).first()\n    users: List[User] = await User.filter(age__gt=10).all()\n    user2: User = await User.filter(name=\"user 1\").get()\n    user3: Optional[User] = await User.filter(age__ge=5).random_one()\n    usersp: List[User] = await User.filter(age__ge=5).paginate(page=1, page_size=3)\n</code></pre>"},{"location":"tutorial/crud/query/#first","title":"<code>first</code>","text":"<p>\u200b\u8fd4\u56de\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u503c\u200b\uff0c\u200b\u5982\u65e0\u5219\u200b\u8fd4\u56de\u200b <code>None</code></p>"},{"location":"tutorial/crud/query/#all","title":"<code>all</code>","text":"<p>\u200b\u8fd4\u56de\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u7684\u200b\u6240\u6709\u200b\u503c\u200b</p>"},{"location":"tutorial/crud/query/#get_1","title":"<code>get</code>","text":"<p>\u200b\u8fd4\u56de\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u5982\u679c\u200b\u7ed3\u679c\u200b\u6709\u200b\u591a\u4e2a\u200b\uff0c\u200b\u6216\u8005\u200b\u6ca1\u6709\u200b\u7ed3\u679c\u200b\uff0c\u200b\u5747\u4f1a\u200b\u629b\u51fa\u200b\u5f02\u5e38\u200b</p>"},{"location":"tutorial/crud/query/#random_one","title":"<code>random_one</code>","text":"<p>\u200b\u8fd4\u56de\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u7684\u200b\u968f\u673a\u200b\u4e00\u4e2a\u200b\u503c\u200b\uff0c\u200b\u5982\u65e0\u5219\u200b\u8fd4\u56de\u200b <code>None</code></p>"},{"location":"tutorial/crud/query/#paginate","title":"<code>paginate</code>","text":"<p>\u200b\u6839\u636e\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u9875\u6570\u200b\u548c\u200b\u6bcf\u9875\u200b\u6570\u91cf\u200b\uff0c\u200b\u8fd4\u56de\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u7684\u200b\u5206\u9875\u200b\u503c\u200b\u5217\u8868\u200b</p>"},{"location":"tutorial/crud/query/#order_by","title":"<code>order_by</code>","text":"<p>\u200b\u6839\u636e\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u5bf9\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b</p> <pre><code>    user1 = await User.filter(User.age &lt;= 15).order_by(User.age).first()\n</code></pre>"},{"location":"tutorial/crud/query/#limit","title":"<code>limit</code>","text":"<p>\u200b\u6839\u636e\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u503c\u200b\u5bf9\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u7684\u200b\u6570\u91cf\u200b\u8fdb\u884c\u200b\u9650\u5236\u200b</p> <pre><code>    users = await User.filter(User.age &gt; 15).limit(3).all()\n</code></pre>"},{"location":"tutorial/crud/query/#offset","title":"<code>offset</code>","text":"<p>\u200b\u6839\u636e\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u503c\u200b\u5bf9\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u8fdb\u884c\u200b\u504f\u79fb\u200b</p> <pre><code>    users = await User.filter(User.age &gt; 15).offset(1).all()\n</code></pre>"},{"location":"tutorial/crud/query/#values","title":"<code>values</code>","text":"<p>\u200b\u4ee5\u200b\u5143\u7ec4\u200b\u7684\u200b\u5f62\u5f0f\u200b\u8fd4\u56de\u200b\u6a21\u578b\u200b\u90e8\u5206\u200b\u5b57\u200b\u6bb5\u200b\u3002</p> <p><code>values</code> \u200b\u63a5\u53d7\u200b\u591a\u4e2a\u200b\u4f4d\u7f6e\u200b\u53c2\u6570\u200b\uff0c\u200b\u5373\u200b\u8981\u200b\u83b7\u53d6\u200b\u7684\u200b\u6a21\u578b\u200b\u5b57\u200b\u6bb5\u200b\u3002</p> <p><code>values</code> \u200b\u8fd8\u6709\u200b\u4e00\u4e2a\u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b <code>flatten</code>\uff0c\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>False</code>\uff0c\u200b\u5f53\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>True</code> \u200b\u65f6\u200b\uff0c\u200b\u4f4d\u7f6e\u200b\u53c2\u6570\u200b\u5fc5\u987b\u200b\u6709\u4e14\u200b\u4ec5\u200b\u6709\u200b\u4e00\u4e2a\u200b\uff0c\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\u5143\u7ec4\u200b\u4f1a\u200b\u88ab\u200b\u5c55\u5e73\u200b\u3002</p> <pre><code>    user_name_and_age: Optional[Tuple[str, int]] = (\n        await User.filter().values(User.name, User.age).first()\n    )\n    user_name_list: List[str] = (\n        await User.filter().values(User.name, flatten=True).all()\n    )\n    user_name: str = (\n        await User.filter(User.age == 15).values(User.name, flatten=True).get()\n    )\n</code></pre>"},{"location":"tutorial/crud/query/#value_dict","title":"<code>value_dict</code>","text":"<p>\u200b\u4ee5\u200b\u5b57\u5178\u200b\u7684\u200b\u5f62\u5f0f\u200b\u8fd4\u56de\u200b\u6a21\u578b\u200b\u7684\u200b\u90e8\u5206\u200b\u5b57\u200b\u6bb5\u200b\u3002</p> <p><code>value_dict</code> \u200b\u63a5\u53d7\u200b\u591a\u4e2a\u200b\u4f4d\u7f6e\u200b\u53c2\u6570\u200b\uff0c\u200b\u5373\u200b\u8981\u200b\u83b7\u53d6\u200b\u7684\u200b\u6a21\u578b\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u82e5\u200b\u4e0d\u200b\u4f20\u5165\u200b\uff0c\u200b\u5219\u200b\u4e3a\u200b\u6a21\u578b\u200b\u5168\u90e8\u200b\u975e\u200b\u5173\u7cfb\u200b\u5b57\u200b\u6bb5\u200b\u3002</p> <pre><code>    user_dict: Optional[Dict[str, Any]] = await User.filter().value_dict().first()\n    user_name_and_age_dict: List[Dict[str, Any]] = (\n        await User.filter().value_dict(User.name, User.age).all()\n    )\n</code></pre>"},{"location":"tutorial/crud/query/#select","title":"<code>select</code>","text":"<p><code>select</code> \u200b\u662f\u200b <code>filter</code> \u200b\u7684\u200b\u65e0\u200b\u67e5\u8be2\u200b\u6761\u4ef6\u200b\u7684\u200b\u7248\u672c\u200b\uff0c\u200b\u652f\u6301\u200b\u4e0e\u200b <code>filter</code> \u200b\u4e00\u6837\u200b\u7684\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"tutorial/crud/query/#all_1","title":"<code>all</code>","text":"<p>\u200b\u5b83\u200b\u662f\u200b <code>Model.filter().all()</code> \u200b\u7684\u200b\u7b80\u5199\u200b\uff0c\u200b\u8fd4\u56de\u200b\u8be5\u200b\u6a21\u578b\u200b\u6240\u6709\u200b\u6a21\u578b\u200b\u6570\u636e\u200b\u3002</p> <pre><code>    all_user: List[User] = await User.all()\n</code></pre>"},{"location":"tutorial/crud/query/#_2","title":"\u5b8c\u6574\u200b\u4ee3\u7801","text":"\u672c\u7ae0\u200b\u5b8c\u6574\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b <pre><code>from typing import Any, Dict, List, Optional, Tuple\n\nimport cherry\n\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\n\n\nclass User(cherry.Model):\n    id: int = cherry.Field(primary_key=True)\n    name: str = cherry.Field(unique=True)\n    age: int\n\n    class Meta:\n        database = db\n        tablename = \"user\"\n\n\nasync def main():\n    await db.init()\n\n    users = [User(id=i, name=f\"user {i}\", age=i * 5) for i in range(1, 11)]\n    await User.insert_many(*users)\n\n    # Pythonic style\n    user: User = await User.get(User.id == 1)\n    # Django style\n    user: User = await User.get(id=1)\n\n    # Pythonic style\n    user_or_none: Optional[User] = await User.get_or_none(User.name == \"user 2\")\n    # Django style\n    user_or_none: Optional[User] = await User.get_or_none(name=\"user 2\")\n\n    # Pythonic style\n    user, is_get = await User.get_or_create(\n        User.name == \"user 3\",\n        defaults={\"id\": 3, \"age\": 15},\n    )\n    # Django style\n    user, is_get = await User.get_or_create(\n        name=\"user 3\",\n        defaults={\"id\": 3, \"age\": 15},\n    )\n\n    # Pythonic style\n    user1: Optional[User] = await User.filter(User.age &lt;= 15).first()\n    users: List[User] = await User.filter(User.age &gt; 10).all()\n    user2: User = await User.filter(User.name == \"user 1\").get()\n    user3: Optional[User] = await User.filter(User.age &gt;= 5).random_one()\n    usersp: List[User] = await User.filter(User.age &lt;= 5).paginate(page=1, page_size=3)\n\n    # Django style\n    user1: Optional[User] = await User.filter(age__le=15).first()\n    users: List[User] = await User.filter(age__gt=10).all()\n    user2: User = await User.filter(name=\"user 1\").get()\n    user3: Optional[User] = await User.filter(age__ge=5).random_one()\n    usersp: List[User] = await User.filter(age__ge=5).paginate(page=1, page_size=3)\n\n    user1 = await User.filter(User.age &lt;= 15).order_by(User.age).first()\n    users = await User.filter(User.age &gt; 15).limit(3).all()\n    users = await User.filter(User.age &gt; 15).offset(1).all()\n\n    user_name_and_age: Optional[Tuple[str, int]] = (\n        await User.filter().values(User.name, User.age).first()\n    )\n    user_name_list: List[str] = (\n        await User.filter().values(User.name, flatten=True).all()\n    )\n    user_name: str = (\n        await User.filter(User.age == 15).values(User.name, flatten=True).get()\n    )\n\n    user_dict: Optional[Dict[str, Any]] = await User.filter().value_dict().first()\n    user_name_and_age_dict: List[Dict[str, Any]] = (\n        await User.filter().value_dict(User.name, User.age).all()\n    )\n\n    all_user: List[User] = await User.all()\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"tutorial/crud/update/","title":"\u66f4\u65b0","text":""},{"location":"tutorial/crud/update/#save","title":"<code>save</code>","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4fee\u6539\u200b\u6a21\u578b\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u540e\u200b\uff0c\u200b\u8c03\u7528\u200b\u6a21\u578b\u200b\u7684\u200b <code>save</code> \u200b\u6765\u200b\u8ba9\u200b\u4fee\u6539\u200b\u7ed3\u679c\u200b\u66f4\u65b0\u200b\u5230\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\uff1a</p> <pre><code>    user = await User(name=\"Paimon\", age=18, birthday=date(2020, 6, 1)).insert()\n    user.age += 1\n    user.birthday = date(2022, 6, 1)\n    await user.save()\n</code></pre> \u200b\u6709\u200b\u5219\u200b\u66f4\u65b0\u200b\u65e0\u5219\u200b\u63d2\u5165\u200b <p><code>save</code> \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u7528\u4e8e\u200b\u63d2\u5165\u200b\uff0c\u200b\u5f53\u200b\u6a21\u578b\u200b\u7684\u200b\u4e3b\u952e\u200b\u5df2\u7ecf\u200b\u5b58\u5728\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\u65f6\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u66f4\u65b0\u200b\uff0c\u200b\u5426\u5219\u200b\u4f1a\u200b\u63d2\u5165\u200b\u8be5\u200b\u6a21\u578b\u200b\u3002</p>"},{"location":"tutorial/crud/update/#update","title":"<code>update</code>","text":"<p>\u200b\u6216\u8005\u200b\u4f7f\u7528\u200b <code>update</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4f20\u5165\u200b\u8981\u200b\u66f4\u65b0\u200b\u7684\u200b\u503c\u6765\u200b\u66f4\u65b0\u200b\uff1a</p> <pre><code>    await user.update(age=21, birthday=date(2023, 6, 1))\n</code></pre>"},{"location":"tutorial/crud/update/#update_or_create","title":"<code>update_or_create</code>","text":"<p>\u200b\u4f7f\u7528\u200b <code>update_or_create</code>\uff0c\u200b\u5982\u679c\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\u5b58\u5728\u200b\u8be5\u200b\u6a21\u578b\u200b\uff0c\u200b\u5219\u200b\u66f4\u65b0\u200b\uff0c\u200b\u5426\u5219\u200b\u63d2\u5165\u200b\u3002</p> <p>\u200b\u8fd4\u56de\u503c\u200b\u7c7b\u578b\u200b\u4e3a\u200b <code>Tuple[Model, bool]</code>\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u503c\u4e3a\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u7b2c\u4e8c\u4e2a\u200b\u503c\u200b\u662f\u200b <code>bool</code> \u200b\u7c7b\u578b\u200b\uff0c<code>True</code> \u200b\u8868\u793a\u200b\u66f4\u65b0\u200b\u4e86\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\uff0c<code>False</code> \u200b\u8868\u793a\u200b\u521b\u5efa\u200b\u4e86\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u3002</p> <pre><code>    user, is_update = await User.update_or_create(\n        User.name == \"Paimon\",\n        defaults={\"age\": 18, \"birthday\": date(2020, 6, 1)},\n    )\n</code></pre> <p>\u200b\u5b83\u200b\u63a5\u53d7\u200b\u82e5\u5e72\u200b\u7684\u200b\u67e5\u8be2\u200b\u6761\u4ef6\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4e00\u4e2a\u200b\u7c7b\u578b\u200b\u4e3a\u200b <code>Dict[str, Any]</code> \u200b\u7684\u200b <code>defaults</code> \u200b\u53c2\u6570\u200b\uff0c\u200b\u7528\u4e8e\u200b\u6307\u5b9a\u200b\u8981\u200b\u66f4\u65b0\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u53ca\u5176\u200b\u503c\u200b\u3002</p> <p>\u200b\u9996\u5148\u200b\u4f1a\u200b\u6839\u636e\u200b\u67e5\u8be2\u200b\u6761\u4ef6\u200b\u67e5\u8be2\u200b\u6307\u5b9a\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u679c\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u4f7f\u7528\u200b <code>defaults</code> \u200b\u5b57\u5178\u200b\u91cc\u200b\u7684\u200b\u6570\u636e\u200b\u6765\u200b\u66f4\u65b0\u200b\u5b83\u200b\uff0c\u200b\u5426\u5219\u200b\uff0c\u200b\u4f1a\u200b\u4f7f\u7528\u200b\u67e5\u8be2\u200b\u6761\u4ef6\u200b\u548c\u200b <code>defaults</code> \u200b\u5b57\u5178\u200b\u91cc\u200b\u7684\u200b\u6570\u636e\u200b\u6765\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6a21\u578b\u200b\u5e76\u200b\u8fd4\u56de\u200b\u3002</p>"},{"location":"tutorial/crud/update/#save_many","title":"<code>save_many</code>","text":"<p>\u200b\u4f7f\u7528\u200b\u6a21\u578b\u200b\u7c7b\u200b\u7684\u200b <code>save_many</code> \u200b\u6765\u200b\u540c\u65f6\u200b\u66f4\u65b0\u200b\u591a\u6761\u200b\u6570\u636e\u200b\uff1a</p> <pre><code>    user1 = await User(name=\"user 1\").insert()\n    user2 = await User(name=\"user 2\").insert()\n    user3 = await User(name=\"user 3\").insert()\n\n    user1.name = \"user 1 updated\"\n    user2.age += 3\n    user3.birthday = date(2024, 6, 1)\n    await User.save_many(user1, user2, user3)\n</code></pre>"},{"location":"tutorial/crud/update/#_2","title":"\u5b8c\u6574\u200b\u4ee3\u7801","text":"\u672c\u7ae0\u200b\u5b8c\u6574\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b <pre><code>from datetime import date\n\nimport cherry\n\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\n\n\nclass User(cherry.Model):\n    id: cherry.AutoIntPK = None\n    name: str\n    age: int = 18\n    birthday: date = cherry.Field(default_factory=date.today)\n\n    class Meta:\n        database = db\n        tablename = \"user\"\n\n\nasync def main():\n    await db.init()\n\n    user = await User(name=\"Paimon\", age=18, birthday=date(2020, 6, 1)).insert()\n    user.age += 1\n    user.birthday = date(2022, 6, 1)\n    await user.save()\n\n    await user.update(age=21, birthday=date(2023, 6, 1))\n\n    user, is_update = await User.update_or_create(\n        User.name == \"Paimon\",\n        defaults={\"age\": 18, \"birthday\": date(2020, 6, 1)},\n    )\n\n    user1 = await User(name=\"user 1\").insert()\n    user2 = await User(name=\"user 2\").insert()\n    user3 = await User(name=\"user 3\").insert()\n\n    user1.name = \"user 1 updated\"\n    user2.age += 3\n    user3.birthday = date(2024, 6, 1)\n    await User.save_many(user1, user2, user3)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"tutorial/relation/difinition/","title":"\u5173\u7cfb\u200b\u6a21\u578b\u200b\u5b9a\u4e49","text":""},{"location":"tutorial/relation/difinition/#_2","title":"\u5b9a\u4e49\u200b\u6a21\u578b\u200b\u95f4\u200b\u5173\u7cfb","text":"<p><code>Cherry</code> \u200b\u652f\u6301\u200b\u5173\u7cfb\u200b\u578b\u200b\u6570\u636e\u5e93\u200b\u7684\u200b\u4e00\u5bf9\u4e00\u200b\u3001\u200b\u4e00\u5bf9\u200b\u591a\u200b\u4ee5\u53ca\u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5173\u7cfb\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u7b80\u5355\u200b\u7684\u200b\u914d\u7f6e\u200b\u5373\u53ef\u200b\u3002</p>"},{"location":"tutorial/relation/difinition/#_3","title":"\u4e00\u5bf9\u4e00","text":"<p>\u200b\u8981\u200b\u58f0\u660e\u200b\u4e00\u5bf9\u4e00\u200b\u5173\u7cfb\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u4f7f\u7528\u200b <code>cherry.ForeignKey</code> \u200b\u6ce8\u89e3\u200b\u5305\u88f9\u200b\u5bf9\u5e94\u200b\u7684\u200b\u6a21\u578b\u200b\u5373\u53ef\u200b\uff0c\u200b\u5728\u200b\u5bf9\u5e94\u200b\u7684\u200b\u6a21\u578b\u200b\u4e0a\u200b\u5219\u200b\u4f7f\u7528\u200b <code>cherry.ReverseRelation</code> \u200b\u6765\u200b\u58f0\u660e\u200b\u53cd\u5411\u200b\u5173\u7cfb\u200b\u3002</p> <pre><code>import cherry\n\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\n\n\nclass UserDetail(cherry.Model):\n    id: cherry.AutoIntPK = None\n    age: int\n    address: str\n    email: str\n    user: cherry.ForeignKey[\"User\"]\n\n    class Meta:\n        database = db\n        tablename = \"user_detail\"\n\n\nclass User(cherry.Model):\n    id: cherry.AutoIntPK = None\n    name: str\n    detail: cherry.ReverseRelation[UserDetail]\n\n    class Meta:\n        database = db\n        tablename = \"user\"\n</code></pre>"},{"location":"tutorial/relation/difinition/#_4","title":"\u4e00\u5bf9\u200b\u591a","text":"<p>\u200b\u4e00\u5bf9\u200b\u591a\u200b\u548c\u200b\u4e00\u5bf9\u4e00\u200b\u5173\u7cfb\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u628a\u200b <code>cherry.ReverseRelation[Model]</code> \u200b\u6539\u6210\u200b <code>cherry.ReverseRelation[List[Model]]</code>\uff0c\u200b\u6ce8\u89e3\u200b\u4e3a\u200b\u6a21\u578b\u200b\u5217\u8868\u200b\u5373\u53ef\u200b\u3002</p> <pre><code>from typing import List, Optional\n\nimport cherry\n\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\n\n\nclass Student(cherry.Model):\n    id: cherry.AutoIntPK = None\n    name: str\n    school: cherry.ForeignKey[Optional[\"School\"]] = None\n\n    class Meta:\n        database = db\n        tablename = \"student\"\n\n\nclass School(cherry.Model):\n    id: cherry.AutoIntPK = None\n    name: str\n    students: cherry.ReverseRelation[List[Student]] = []\n\n    class Meta:\n        database = db\n        tablename = \"school\"\n\n\nasync def main():\n    await db.init()\n\n    school = School(name=\"school 1\")\n    await school.insert()\n\n    await Student(name=\"student 1\", school=school).insert()\n\n    school2 = School(\n        name=\"school 2\",\n        students=[\n            Student(name=\"student 2\"),\n            Student(name=\"student 3\"),\n        ],\n    )\n    await school2.insert_with_related()\n\n    student4 = Student(name=\"student 4\", school=School(name=\"school 3\"))\n    await student4.insert_with_related()\n\n    # Pythonic Style\n    student: List[Student] = await Student.filter(School.name == \"school 2\").all()\n    # Django Style\n    student: List[Student] = await Student.filter(school_name=\"school 2\").all()\n\n    student_with_school: Student = (\n        await Student.filter(Student.name == \"student 1\")\n        .prefetch_related(Student.school)\n        .get()\n    )\n\n    school_with_students: School = (\n        await School.filter(School.name == \"school 2\")\n        .prefetch_related(School.students)\n        .get()\n    )\n\n    schools_with_students: List[School] = (\n        await School.select_related().prefetch_related(School.students).all()\n    )\n\n    school = await School.get(name=\"school 3\")\n    await school.fetch_related(School.students)\n    assert len(school.students) == 1\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"tutorial/relation/difinition/#_5","title":"\u591a\u200b\u5bf9\u200b\u591a","text":"<p>\u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5173\u7cfb\u200b\u5173\u7cfb\u200b\u5219\u200b\u4f7f\u7528\u200b <code>cherry.ManyToMany</code> \u200b\u6765\u200b\u6ce8\u89e3\u200b\u3002</p> <pre><code>from typing import List\n\nimport cherry\n\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\n\n\nclass Tag(cherry.Model):\n    id: cherry.AutoIntPK = None\n    content: str\n    posts: cherry.ManyToMany[List[\"Post\"]] = []\n\n    class Meta:\n        database = db\n        tablename = \"tag\"\n\n\nclass Post(cherry.Model):\n    id: cherry.AutoIntPK = None\n    title: str\n    tags: cherry.ManyToMany[List[Tag]] = []\n\n    class Meta:\n        database = db\n        tablename = \"post\"\n\n\nasync def main():\n    await db.init()\n\n    tag1 = await Tag(content=\"tag 1\").insert()\n    tag2 = await Tag(content=\"tag 2\").insert()\n\n    post1 = await Post(title=\"post 1\").insert()\n    post2 = await Post(title=\"post 2\").insert()\n\n    await post1.add(tag1)\n    await post1.add(tag2)\n\n    await post2.add(tag1)\n\n    assert post1.tags == [tag1, tag2]\n    assert post2.tags == [tag1]\n\n    await tag1.fetch_related(Tag.posts)\n    assert len(tag1.posts) == 2\n\n    await post1.remove(tag1)\n    assert post1.tags == [tag2]\n\n    await tag1.fetch_related(Tag.posts)\n    assert len(tag1.posts) == 1\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"tutorial/relation/difinition/#_6","title":"\u5173\u7cfb\u200b\u5b57\u200b\u6bb5\u200b\u914d\u7f6e","text":"<p><code>ForeignKey</code>, <code>ReverseRelation</code>, <code>ManyToMany</code> \u200b\u7b49\u200b\u6ce8\u89e3\u200b\u53ea\u80fd\u200b\u5728\u200b\u6a21\u578b\u200b\u4e3b\u952e\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u65f6\u200b\u4f7f\u7528\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u200b\u590d\u5408\u200b\u4e3b\u952e\u200b\u6216\u8005\u200b\u60f3\u8981\u200b\u4f7f\u7528\u200b\u5176\u4ed6\u200b\u5b57\u6bb5\u200b\u505a\u200b\u5916\u952e\u200b\uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b <code>cherry.Relationship</code> \u200b\u6765\u200b\u58f0\u660e\u200b\u3002</p> <p>\u200b\u53e6\u5916\u200b\uff0c\u200b\u5173\u4e8e\u200b\u8868\u200b\u5173\u7cfb\u200b\u7684\u200b\u7ea7\u8054\u200b\u64cd\u4f5c\u200b\u7b49\u200b\uff0c\u200b\u4e5f\u200b\u9700\u8981\u200b\u5728\u200b <code>cherry.Relationship</code> \u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u3002</p> <p><code>cherry.Relationship</code> \u200b\u5177\u6709\u200b\u4ee5\u4e0b\u200b\u53c2\u6570\u200b\uff1a</p> <ul> <li>foreign_key - \u200b\u5916\u952e\u200b\u76ee\u6807\u200b\u5b57\u200b\u6bb5\u200b\u3002\u200b\u5728\u200b\u4e00\u5bf9\u4e00\u200b\u6216\u200b\u4e00\u5bf9\u200b\u591a\u200b\u5173\u7cfb\u200b\u7684\u200b\u5916\u952e\u200b\u4fa7\u8868\u200b\u7684\u200b\u4f7f\u7528\u200b\uff0c\u200b\u6307\u5b9a\u200b\u4f7f\u7528\u200b\u76ee\u6807\u200b\u8868\u200b\u7684\u200b\u54ea\u4e2a\u200b\u5b57\u200b\u6bb5\u200b\u4f5c\u4e3a\u200b\u5916\u952e\u200b\u3002</li> <li>foreign_key_extra - \u200b\u4e00\u4e9b\u200b\u4f20\u7ed9\u200b <code>sqlalchemy.ForeignKey</code> \u200b\u7684\u200b\u989d\u5916\u200b\u914d\u7f6e\u200b\u3002</li> <li>reverse_related - \u200b\u53cd\u5411\u200b\u5173\u7cfb\u200b\u5b57\u200b\u6bb5\u200b\u3002\u200b\u5728\u200b\u4e00\u5bf9\u4e00\u200b\u6216\u200b\u4e00\u5bf9\u200b\u591a\u200b\u5173\u7cfb\u200b\u4e2d\u200b\u7684\u200b\u53cd\u5411\u200b\u5173\u7cfb\u200b\u4e2d\u200b\u4f7f\u7528\u200b\uff0c\u200b\u8bbe\u200b\u4e3a\u200b <code>True</code> \u200b\u5373\u53ef\u200b\u3002</li> <li>many_to_many - \u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5916\u952e\u200b\u5b57\u200b\u6bb5\u200b\u3002\u200b\u5728\u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5173\u7cfb\u200b\u4e2d\u200b\u4f7f\u7528\u200b\uff0c\u200b\u6307\u5b9a\u200b\u81ea\u8eab\u200b\u6a21\u578b\u200b\u7684\u200b\u54ea\u4e2a\u200b\u5b57\u6bb5\u200b\u4e3a\u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5173\u7cfb\u200b\u4e2d\u200b\u7684\u200b\u5916\u200b\u952e\u503c\u200b\u3002</li> <li>on_update - \u200b\u76f8\u5173\u200b\u6a21\u578b\u200b\u66f4\u65b0\u200b\u65f6\u200b\u91c7\u53d6\u200b\u7684\u200b\u63aa\u65bd\u200b\uff0c\u200b\u6765\u81ea\u200b <code>sqlalchemy.ForeignKey</code>\u3002</li> <li>on_delete - \u200b\u76f8\u5173\u200b\u6a21\u578b\u200b\u5220\u9664\u200b\u65f6\u200b\u91c7\u53d6\u200b\u7684\u200b\u63aa\u65bd\u200b\uff0c\u200b\u6765\u81ea\u200b <code>sqlalchemy.ForeignKey</code>\u3002</li> <li>related_field - \u200b\u5173\u8054\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u3002\u200b\u901a\u5e38\u200b\u65e0\u9700\u200b\u4f60\u200b\u81ea\u5df1\u200b\u914d\u7f6e\u200b\uff0c\u200b\u6a21\u578b\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u67e5\u627e\u200b\u3002</li> </ul> <p><code>on_update</code> \u200b\u548c\u200b <code>on_delete</code> \u200b\u5141\u8bb8\u200b\u7684\u200b\u503c\u200b\u6709\u200b\uff1a</p> <ul> <li>RESTRICT - \u200b\u9650\u5236\u200b\u66f4\u65b0\u200b/\u200b\u5220\u9664\u200b\u3002</li> <li>CASCADE - \u200b\u7ea7\u8054\u200b\u66f4\u65b0\u200b/\u200b\u5220\u9664\u200b\u3002</li> <li>SET NULL - \u200b\u8bbe\u200b\u4e3a\u200b NULL(None)\uff0c\u200b\u5982\u679c\u200b\u5b57\u6bb5\u200b\u4e0d\u200b\u5141\u8bb8\u200b\u4e3a\u200b None\uff0c\u200b\u5219\u200b\u4f1a\u200b\u629b\u51fa\u200b\u5f02\u5e38\u200b\u3002</li> <li>SET DEFAULT - \u200b\u8bbe\u200b\u4e3a\u200b\u9ed8\u8ba4\u503c\u200b\uff0c\u200b\u5982\u679c\u200b\u5b57\u200b\u6bb5\u200b\u6ca1\u6709\u200b\u9ed8\u8ba4\u503c\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u629b\u51fa\u200b\u5f02\u5e38\u200b\u3002</li> <li>NO ACTION - \u200b\u4e0d\u200b\u505a\u200b\u4efb\u4f55\u200b\u884c\u52a8\u200b\uff0c\u200b\u8be5\u62a5\u200b\u9519\u200b\u5c31\u200b\u62a5\u9519\u200b\u3002</li> </ul> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e24\u4e2a\u200b\u4f8b\u5b50\u200b\u3002</p>"},{"location":"tutorial/relation/difinition/#_7","title":"\u4e00\u5bf9\u4e00\u200b\u3001\u200b\u4e00\u5bf9\u200b\u591a","text":"<pre><code>class Student(cherry.Model):\n    id: cherry.AutoIntPK = None\n    name: str\n    school: Optional[\"School\"] = cherry.Relationship(\n        default=None,\n        foreign_key=\"school_id\",\n        on_update=\"CASCADE\",\n        on_delete=\"CASCADE\",\n    )\n\n    class Meta:\n        database = db\n        tablename = \"student\"\n\n\nclass School(cherry.Model):\n    school_id: cherry.PrimaryKey[int]\n    school_name: cherry.PrimaryKey[str]\n    students: List[Student] = cherry.Relationship(default=[], reverse_related=True)\n\n    class Meta:\n        database = db\n        tablename = \"school\"\n</code></pre>"},{"location":"tutorial/relation/difinition/#_8","title":"\u591a\u200b\u5bf9\u200b\u591a","text":"<pre><code>class Tag(cherry.Model):\n    tag_id1: cherry.PrimaryKey[int]\n    tag_id2: cherry.PrimaryKey[int]\n    content: str\n    posts: List[\"Post\"] = cherry.Relationship(\n        default=[],\n        many_to_many=\"post_id2\",\n        on_delete=\"RESTRICT\",\n        on_update=\"RESTRICT\",\n    )\n\n    class Meta:\n        database = db\n        tablename = \"tag\"\n\n\nclass Post(cherry.Model):\n    post_id1: cherry.PrimaryKey[int]\n    post_id2: cherry.PrimaryKey[int]\n    title: str\n    tags: List[Tag] = cherry.Relationship(default=[], many_to_many=\"tag_id1\")\n\n    class Meta:\n        database = db\n        tablename = \"post\"\n</code></pre>"},{"location":"tutorial/relation/query/","title":"\u5173\u7cfb\u200b\u6a21\u578b\u200b\u589e\u5220\u200b\u6539\u67e5","text":""},{"location":"tutorial/relation/query/#_2","title":"\u8bfb\u53d6","text":""},{"location":"tutorial/relation/query/#filterprefetch_related","title":"<code>filter().prefetch_related</code>","text":"<p>\u200b\u901a\u5e38\u200b\u7684\u200b <code>get</code>, <code>filter</code> \u200b\u7b49\u200b\u67e5\u8be2\u200b\u51fd\u6570\u200b\uff0c\u200b\u5e76\u200b\u4e0d\u4f1a\u200b\u540c\u65f6\u200b\u8fd4\u56de\u200b\u76f8\u5173\u8054\u200b\u7684\u200b\u6a21\u578b\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200b <code>filter</code> \u200b\u65f6\u200b\u6dfb\u52a0\u200b <code>prefetch_related</code> \u200b\u9009\u9879\u200b\uff0c\u200b\u8ba9\u200b\u5176\u200b\u540c\u65f6\u200b\u83b7\u53d6\u200b\u76f8\u5173\u8054\u200b\u7684\u200b\u6a21\u578b\u200b\u3002</p> <pre><code>    school_with_students: School = (\n        await School.filter(School.name == \"school 2\")\n        .prefetch_related(School.students)\n        .get()\n    )\n\n    schools_with_students: List[School] = (\n        await School.select_related().prefetch_related(School.students).all()\n    )\n</code></pre> <p><code>prefetch_related</code> \u200b\u63a5\u53d7\u200b\u82e5\u5e72\u4e2a\u200b\u4f4d\u7f6e\u200b\u53c2\u6570\u200b\uff0c\u200b\u7528\u4e8e\u200b\u6307\u5b9a\u200b\u8981\u200b\u540c\u65f6\u200b\u83b7\u53d6\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u5982\u679c\u200b\u4e0d\u200b\u4f20\u5165\u200b\u53c2\u6570\u200b\uff0c\u200b\u5219\u200b\u662f\u200b\u6a21\u578b\u200b\u4e0a\u200b\u7684\u200b\u6240\u6709\u200b\u5173\u7cfb\u200b\u5b57\u200b\u6bb5\u200b\u3002</p>"},{"location":"tutorial/relation/query/#select_related","title":"<code>select_related</code>","text":"<p><code>select_related</code> \u200b\u662f\u200b\u6a21\u578b\u200b\u7c7b\u4e0a\u200b\u7684\u200b\u6ca1\u6709\u200b\u67e5\u8be2\u200b\u6761\u4ef6\u200b\u7684\u200b <code>filter().prefetch_related</code> \u200b\u7684\u200b\u7b80\u5199\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u53c2\u6570\u200b\u4e0e\u200b <code>prefetch_related</code> \u200b\u76f8\u540c\u200b\u3002</p>"},{"location":"tutorial/relation/query/#fetch_related","title":"<code>fetch_related</code>","text":"<p>\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u4e0a\u200b\u8c03\u7528\u200b <code>fetch_related</code>\uff0c\u200b\u6765\u200b\u8ba9\u200b\u8be5\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u83b7\u53d6\u200b\u4e0e\u200b\u5b83\u200b\u76f8\u5173\u8054\u200b\u7684\u200b\u6a21\u578b\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u53c2\u6570\u200b\u4e0e\u200b <code>prefetch_related</code> \u200b\u76f8\u540c\u200b\u3002</p> <pre><code>    school = await School.get(name=\"school 3\")\n    await school.fetch_related(School.students)\n    assert len(school.students) == 1\n</code></pre>"},{"location":"tutorial/relation/query/#_3","title":"\u63d2\u5165","text":""},{"location":"tutorial/relation/query/#insert","title":"<code>insert</code>","text":"<pre><code>    school = School(name=\"school 1\")\n    await school.insert()\n\n    await Student(name=\"student 1\", school=school).insert()\n</code></pre> <p>\u200b\u5173\u7cfb\u200b\u5b57\u200b\u6bb5\u200b</p> <p>\u200b\u5bf9\u4e8e\u200b\u6709\u200b\u76f8\u5173\u200b\u5173\u7cfb\u200b\u7684\u200b\u6a21\u578b\u200b\uff0c<code>insert</code> \u200b\u548c\u200b <code>insert_many</code> \u200b\u53ea\u4f1a\u200b\u5c06\u200b\u81ea\u8eab\u200b\u548c\u200b\u5173\u7cfb\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u4e4b\u95f4\u200b\u5efa\u7acb\u200b\u5173\u7cfb\u200b\uff0c\u200b\u800c\u200b\u4e0d\u4f1a\u200b\u5c06\u200b\u5173\u7cfb\u200b\u6a21\u578b\u200b\u4e00\u8d77\u200b\u63d2\u5165\u200b\u5230\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\uff0c\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\uff0c\u200b\u4f60\u200b\u5fc5\u987b\u200b\u5148\u200b\u5c06\u200b\u5173\u7cfb\u200b\u6a21\u578b\u200b\u63d2\u5165\u200b\u5230\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u8d4b\u503c\u200b\u7ed9\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u7684\u200b\u5173\u7cfb\u200b\u5b57\u6bb5\u200b\u4e0a\u200b\u3002\u200b\u6b63\u5982\u200b\u8be5\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u4f60\u200b\u9700\u8981\u200b\u5148\u200b\u5c06\u200b <code>school</code> \u200b\u63d2\u5165\u200b\u5230\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\uff0c\u200b\u518d\u200b\u5c06\u200b\u5176\u200b\u8d4b\u503c\u200b\u7ed9\u200b <code>student</code> \u200b\u7684\u200b <code>school</code> \u200b\u5b57\u6bb5\u200b\u4e0a\u200b\u3002</p> <p>\u200b\u6b64\u5916\u200b\uff0c<code>insert</code> \u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u7c7b\u578b\u200b\u4e3a\u200b <code>bool</code> \u200b\u7684\u200b <code>exclude_related</code> \u200b\u53c2\u6570\u200b\uff0c\u200b\u7528\u4e8e\u200b\u6307\u5b9a\u200b\u662f\u5426\u200b\u8981\u200b\u4e0e\u200b\u5173\u7cfb\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u5efa\u7acb\u200b\u5173\u7cfb\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>False</code>\u3002</p>"},{"location":"tutorial/relation/query/#insert_with_related","title":"<code>insert_with_related</code>","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u7684\u200b <code>insert_with_related</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5c06\u200b\u5173\u7cfb\u200b\u6a21\u578b\u200b\u8fde\u540c\u200b\u81ea\u8eab\u200b\u4e00\u8d77\u200b\u63d2\u5165\u200b\u5230\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\uff1a</p> <pre><code>    school2 = School(\n        name=\"school 2\",\n        students=[\n            Student(name=\"student 2\"),\n            Student(name=\"student 3\"),\n        ],\n    )\n    await school2.insert_with_related()\n\n    student4 = Student(name=\"student 4\", school=School(name=\"school 3\"))\n    await student4.insert_with_related()\n</code></pre> <p>\u200b\u8fd9\u6837\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u7701\u53bb\u200b\u5148\u200b\u63d2\u5165\u200b\u5173\u7cfb\u200b\u6a21\u578b\u200b\u7684\u200b\u6b65\u9aa4\u200b\u4e86\u200b\u3002</p>"},{"location":"tutorial/relation/query/#add","title":"<code>add</code>","text":"<p>\u200b\u8be5\u200b\u65b9\u6cd5\u200b\u4ec5\u200b\u9002\u7528\u200b\u4e8e\u200b <code>ManyToMany</code> \u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5173\u7cfb\u200b\u4e0a\u200b\uff0c\u200b\u5b83\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u5c06\u200b\u8be5\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u6dfb\u52a0\u200b\u5230\u200b\u81ea\u5df1\u200b\u7684\u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5b57\u200b\u6bb5\u503c\u200b\u4e0a\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u63d0\u4f9b\u200b\u7684\u200b\u6a21\u578b\u200b\u662f\u975e\u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5173\u7cfb\u200b\u5b57\u200b\u6bb5\u200b\u6a21\u578b\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u629b\u51fa\u200b\u5f02\u5e38\u200b\u3002</p> <pre><code>    tag1 = await Tag(content=\"tag 1\").insert()\n    tag2 = await Tag(content=\"tag 2\").insert()\n\n    post1 = await Post(title=\"post 1\").insert()\n    post2 = await Post(title=\"post 2\").insert()\n\n    await post1.add(tag1)\n    await post1.add(tag2)\n\n    await post2.add(tag1)\n\n    assert post1.tags == [tag1, tag2]\n    assert post2.tags == [tag1]\n\n    await tag1.fetch_related(Tag.posts)\n    assert len(tag1.posts) == 2\n</code></pre>"},{"location":"tutorial/relation/query/#_4","title":"\u5220\u9664","text":"<p>\u200b\u5bf9\u4e8e\u200b\u4e00\u5bf9\u200b\u591a\u200b\u548c\u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5173\u7cfb\u200b\u6a21\u578b\u200b\uff0c\u200b\u5728\u200b\u6a21\u578b\u200b\u5b9a\u4e49\u200b\u65f6\u6709\u200b\u7ea7\u8054\u200b\u76f8\u5173\u200b\u914d\u7f6e\u200b\u3002</p>"},{"location":"tutorial/relation/query/#remove","title":"<code>remove</code>","text":"<p>\u200b\u5bf9\u4e8e\u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5173\u7cfb\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b <code>remove</code> \u200b\u6765\u200b\u5c06\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u4ece\u200b\u81ea\u5df1\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u4e0a\u200b\u5220\u9664\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u63d0\u4f9b\u200b\u7684\u200b\u6a21\u578b\u200b\u662f\u975e\u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5173\u7cfb\u200b\u5b57\u200b\u6bb5\u200b\u6a21\u578b\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u629b\u51fa\u200b\u5f02\u5e38\u200b\u3002</p> <pre><code>    await post1.remove(tag1)\n    assert post1.tags == [tag2]\n\n    await tag1.fetch_related(Tag.posts)\n    assert len(tag1.posts) == 1\n</code></pre>"},{"location":"tutorial/relation/query/#_5","title":"\u5b8c\u6574\u200b\u4ee3\u7801","text":"\u4e00\u5bf9\u200b\u591a\u200b\u5b8c\u6574\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b <pre><code>from typing import List, Optional\n\nimport cherry\n\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\n\n\nclass Student(cherry.Model):\n    id: cherry.AutoIntPK = None\n    name: str\n    school: cherry.ForeignKey[Optional[\"School\"]] = None\n\n    class Meta:\n        database = db\n        tablename = \"student\"\n\n\nclass School(cherry.Model):\n    id: cherry.AutoIntPK = None\n    name: str\n    students: cherry.ReverseRelation[List[Student]] = []\n\n    class Meta:\n        database = db\n        tablename = \"school\"\n\n\nasync def main():\n    await db.init()\n\n    school = School(name=\"school 1\")\n    await school.insert()\n\n    await Student(name=\"student 1\", school=school).insert()\n\n    school2 = School(\n        name=\"school 2\",\n        students=[\n            Student(name=\"student 2\"),\n            Student(name=\"student 3\"),\n        ],\n    )\n    await school2.insert_with_related()\n\n    student4 = Student(name=\"student 4\", school=School(name=\"school 3\"))\n    await student4.insert_with_related()\n\n    # Pythonic Style\n    student: List[Student] = await Student.filter(School.name == \"school 2\").all()\n    # Django Style\n    student: List[Student] = await Student.filter(school_name=\"school 2\").all()\n\n    student_with_school: Student = (\n        await Student.filter(Student.name == \"student 1\")\n        .prefetch_related(Student.school)\n        .get()\n    )\n\n    school_with_students: School = (\n        await School.filter(School.name == \"school 2\")\n        .prefetch_related(School.students)\n        .get()\n    )\n\n    schools_with_students: List[School] = (\n        await School.select_related().prefetch_related(School.students).all()\n    )\n\n    school = await School.get(name=\"school 3\")\n    await school.fetch_related(School.students)\n    assert len(school.students) == 1\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre> \u200b\u591a\u200b\u5bf9\u200b\u591a\u200b\u5b8c\u6574\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b <pre><code>from typing import List\n\nimport cherry\n\ndb = cherry.Database(\"sqlite+aiosqlite:///:memory:\")\n\n\nclass Tag(cherry.Model):\n    id: cherry.AutoIntPK = None\n    content: str\n    posts: cherry.ManyToMany[List[\"Post\"]] = []\n\n    class Meta:\n        database = db\n        tablename = \"tag\"\n\n\nclass Post(cherry.Model):\n    id: cherry.AutoIntPK = None\n    title: str\n    tags: cherry.ManyToMany[List[Tag]] = []\n\n    class Meta:\n        database = db\n        tablename = \"post\"\n\n\nasync def main():\n    await db.init()\n\n    tag1 = await Tag(content=\"tag 1\").insert()\n    tag2 = await Tag(content=\"tag 2\").insert()\n\n    post1 = await Post(title=\"post 1\").insert()\n    post2 = await Post(title=\"post 2\").insert()\n\n    await post1.add(tag1)\n    await post1.add(tag2)\n\n    await post2.add(tag1)\n\n    assert post1.tags == [tag1, tag2]\n    assert post2.tags == [tag1]\n\n    await tag1.fetch_related(Tag.posts)\n    assert len(tag1.posts) == 2\n\n    await post1.remove(tag1)\n    assert post1.tags == [tag2]\n\n    await tag1.fetch_related(Tag.posts)\n    assert len(tag1.posts) == 1\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"}]}